#!/usr/bin/env bash

# Define your tasks here.
lint() {
	_check_binaries "shellcheck"
	find . -type f -iname "*.sh" -o -iname "*.bash" -not -path "./test/helpers*" -exec sh -c "shellcheck --format=tty --shell=bash {}" ";"
}

test() {
	_check_binaries "bats"
	find . -type f -iname "*.bats" -not -path "./test/helpers*" -exec sh -c "bats {}" ";"
}

format() {
	_check_binaries "shfmt"
	find . -type f -iname "*.sh" -o -iname "*.bash" -not -path "./test/helpers*" -exec sh -c "shfmt -bn -ci -w {}" ";"
}

watch() {
	_check_binaries "entr"
	find . -type f -iname "*.sh" -o -iname "*.bash" -o -iname "*.bats" -not -path "./test/helpers*" | entr -c bash run check
}

install() {
  git submodule update --init --recursive
}

check() {
	lint
	test
}

# Don't go down here.
set -e

# Check binaries.
_check_binaries() {
	for i in "$@"; do
		[ -x "$(command -v "$i")" ] || {
			echo "bats is required" >&2
			exit 1
		}
	done
}

# Check for task.
[ -n "$1" ] || {
	echo "first argument is mandatory" >&2
	exit 1
}

[ -n "$(declare -f -F $1)" ] || {
	echo "task unrecognized" >&2
	exit 1
}

# Run task.
eval "$@"
